// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Loan aggregating api
 *
 * API для управления организациями и заявками на кредит
 *
 * API version: 0.0.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"OrganizationsList": Route{
			"OrganizationsList",
			strings.ToUpper("Get"),
			"/api/v1/organizations",
			c.OrganizationsList,
		},
		"CreateNewOrganization": Route{
			"CreateNewOrganization",
			strings.ToUpper("Post"),
			"/api/v1/organizations",
			c.CreateNewOrganization,
		},
		"GetOrganizationByUUID": Route{
			"GetOrganizationByUUID",
			strings.ToUpper("Get"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.GetOrganizationByUUID,
		},
		"DeleteOrganizationByUUID": Route{
			"DeleteOrganizationByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.DeleteOrganizationByUUID,
		},
		"UpdateOrganizationByUUID": Route{
			"UpdateOrganizationByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.UpdateOrganizationByUUID,
		},
		"GetOrganizationByName": Route{
			"GetOrganizationByName",
			strings.ToUpper("Get"),
			"/api/v1/organizations/by-name/{name}",
			c.GetOrganizationByName,
		},
		"DeleteOrganizationByName": Route{
			"DeleteOrganizationByName",
			strings.ToUpper("Delete"),
			"/api/v1/organizations/by-name/{name}",
			c.DeleteOrganizationByName,
		},
		"UpdateOrganizationByName": Route{
			"UpdateOrganizationByName",
			strings.ToUpper("Patch"),
			"/api/v1/organizations/by-name/{name}",
			c.UpdateOrganizationByName,
		},
		"UsersList": Route{
			"UsersList",
			strings.ToUpper("Get"),
			"/api/v1/users",
			c.UsersList,
		},
		"CreateNewUser": Route{
			"CreateNewUser",
			strings.ToUpper("Post"),
			"/api/v1/users",
			c.CreateNewUser,
		},
		"GetUserByUUID": Route{
			"GetUserByUUID",
			strings.ToUpper("Get"),
			"/api/v1/users/by-uuid/{uuid}",
			c.GetUserByUUID,
		},
		"DeleteUserByUUID": Route{
			"DeleteUserByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/users/by-uuid/{uuid}",
			c.DeleteUserByUUID,
		},
		"UpdateUserByUUID": Route{
			"UpdateUserByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/users/by-uuid/{uuid}",
			c.UpdateUserByUUID,
		},
		"GetUserByEmail": Route{
			"GetUserByEmail",
			strings.ToUpper("Get"),
			"/api/v1/users/by-email/{email}",
			c.GetUserByEmail,
		},
		"LoanApplications": Route{
			"LoanApplications",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications",
			c.LoanApplications,
		},
		"CreateNewLoanApplication": Route{
			"CreateNewLoanApplication",
			strings.ToUpper("Post"),
			"/api/v1/loan_applications",
			c.CreateNewLoanApplication,
		},
		"GetLoanApplicationsByIncomingOrganizationUUID": Route{
			"GetLoanApplicationsByIncomingOrganizationUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-incoming-organization-uuid/{incoming_organization_uuid}",
			c.GetLoanApplicationsByIncomingOrganizationUUID,
		},
		"GetLoanApplicationsByIssueOrganizationUUID": Route{
			"GetLoanApplicationsByIssueOrganizationUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-issue-organization-uuid/{issue_organization_uuid}",
			c.GetLoanApplicationsByIssueOrganizationUUID,
		},
		"GetLoanApplicationByUUID": Route{
			"GetLoanApplicationByUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.GetLoanApplicationByUUID,
		},
		"DeleteLoanApplicationByUUID": Route{
			"DeleteLoanApplicationByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.DeleteLoanApplicationByUUID,
		},
		"UpdateLoanApplicationByUUID": Route{
			"UpdateLoanApplicationByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.UpdateLoanApplicationByUUID,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DefaultAPIController
func (c *DefaultAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"OrganizationsList",
			strings.ToUpper("Get"),
			"/api/v1/organizations",
			c.OrganizationsList,
		},
		Route{
			"CreateNewOrganization",
			strings.ToUpper("Post"),
			"/api/v1/organizations",
			c.CreateNewOrganization,
		},
		Route{
			"GetOrganizationByUUID",
			strings.ToUpper("Get"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.GetOrganizationByUUID,
		},
		Route{
			"DeleteOrganizationByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.DeleteOrganizationByUUID,
		},
		Route{
			"UpdateOrganizationByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/organizations/by-uuid/{uuid}",
			c.UpdateOrganizationByUUID,
		},
		Route{
			"GetOrganizationByName",
			strings.ToUpper("Get"),
			"/api/v1/organizations/by-name/{name}",
			c.GetOrganizationByName,
		},
		Route{
			"DeleteOrganizationByName",
			strings.ToUpper("Delete"),
			"/api/v1/organizations/by-name/{name}",
			c.DeleteOrganizationByName,
		},
		Route{
			"UpdateOrganizationByName",
			strings.ToUpper("Patch"),
			"/api/v1/organizations/by-name/{name}",
			c.UpdateOrganizationByName,
		},
		Route{
			"UsersList",
			strings.ToUpper("Get"),
			"/api/v1/users",
			c.UsersList,
		},
		Route{
			"CreateNewUser",
			strings.ToUpper("Post"),
			"/api/v1/users",
			c.CreateNewUser,
		},
		Route{
			"GetUserByUUID",
			strings.ToUpper("Get"),
			"/api/v1/users/by-uuid/{uuid}",
			c.GetUserByUUID,
		},
		Route{
			"DeleteUserByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/users/by-uuid/{uuid}",
			c.DeleteUserByUUID,
		},
		Route{
			"UpdateUserByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/users/by-uuid/{uuid}",
			c.UpdateUserByUUID,
		},
		Route{
			"GetUserByEmail",
			strings.ToUpper("Get"),
			"/api/v1/users/by-email/{email}",
			c.GetUserByEmail,
		},
		Route{
			"LoanApplications",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications",
			c.LoanApplications,
		},
		Route{
			"CreateNewLoanApplication",
			strings.ToUpper("Post"),
			"/api/v1/loan_applications",
			c.CreateNewLoanApplication,
		},
		Route{
			"GetLoanApplicationsByIncomingOrganizationUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-incoming-organization-uuid/{incoming_organization_uuid}",
			c.GetLoanApplicationsByIncomingOrganizationUUID,
		},
		Route{
			"GetLoanApplicationsByIssueOrganizationUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-issue-organization-uuid/{issue_organization_uuid}",
			c.GetLoanApplicationsByIssueOrganizationUUID,
		},
		Route{
			"GetLoanApplicationByUUID",
			strings.ToUpper("Get"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.GetLoanApplicationByUUID,
		},
		Route{
			"DeleteLoanApplicationByUUID",
			strings.ToUpper("Delete"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.DeleteLoanApplicationByUUID,
		},
		Route{
			"UpdateLoanApplicationByUUID",
			strings.ToUpper("Patch"),
			"/api/v1/loan_applications/by-uuid/{uuid}",
			c.UpdateLoanApplicationByUUID,
		},
	}
}



// OrganizationsList - organizations list
func (c *DefaultAPIController) OrganizationsList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.OrganizationsList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNewOrganization - Create new organization
func (c *DefaultAPIController) CreateNewOrganization(w http.ResponseWriter, r *http.Request) {
	var createNewOrganizationRequestParam CreateNewOrganizationRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createNewOrganizationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateNewOrganizationRequestRequired(createNewOrganizationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateNewOrganizationRequestConstraints(createNewOrganizationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNewOrganization(r.Context(), createNewOrganizationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganizationByUUID - Find organization by UUID
func (c *DefaultAPIController) GetOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetOrganizationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOrganizationByUUID - Delete organization by UUID
func (c *DefaultAPIController) DeleteOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteOrganizationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrganizationByUUID - Update Organization by UUID
func (c *DefaultAPIController) UpdateOrganizationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var organizationPatchParam OrganizationPatch
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationPatchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationPatchRequired(organizationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationPatchConstraints(organizationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrganizationByUUID(r.Context(), uuidParam, organizationPatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganizationByName - Find organization by name
func (c *DefaultAPIController) GetOrganizationByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetOrganizationByName(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOrganizationByName - Delete organization by name
func (c *DefaultAPIController) DeleteOrganizationByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.DeleteOrganizationByName(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrganizationByName - Update organization by name
func (c *DefaultAPIController) UpdateOrganizationByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var organizationPatchParam OrganizationPatch
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationPatchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationPatchRequired(organizationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationPatchConstraints(organizationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrganizationByName(r.Context(), nameParam, organizationPatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersList - users list
func (c *DefaultAPIController) UsersList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UsersList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNewUser - Create new user
func (c *DefaultAPIController) CreateNewUser(w http.ResponseWriter, r *http.Request) {
	var createNewUserRequestParam CreateNewUserRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createNewUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateNewUserRequestRequired(createNewUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateNewUserRequestConstraints(createNewUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNewUser(r.Context(), createNewUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserByUUID - Find user by UUID
func (c *DefaultAPIController) GetUserByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetUserByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserByUUID - Delete user by UUID
func (c *DefaultAPIController) DeleteUserByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteUserByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserByUUID - Update User by UUID
func (c *DefaultAPIController) UpdateUserByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var userPatchParam UserPatch
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userPatchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserPatchRequired(userPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserPatchConstraints(userPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserByUUID(r.Context(), uuidParam, userPatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserByEmail - Find user by E-mail
func (c *DefaultAPIController) GetUserByEmail(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	emailParam := params["email"]
	if emailParam == "" {
		c.errorHandler(w, r, &RequiredError{"email"}, nil)
		return
	}
	result, err := c.service.GetUserByEmail(r.Context(), emailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LoanApplications - Loan applications list
func (c *DefaultAPIController) LoanApplications(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var valueParam float32
	if query.Has("value") {
		param, err := parseNumericParameter[float32](
			query.Get("value"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "value", Err: err}, nil)
			return
		}

		valueParam = param
	} else {
	}
	var incomingOrganizationUuidParam string
	if query.Has("incoming_organization_uuid") {
		param := query.Get("incoming_organization_uuid")

		incomingOrganizationUuidParam = param
	} else {
	}
	var issueOrganizationUuidParam string
	if query.Has("issue_organization_uuid") {
		param := query.Get("issue_organization_uuid")

		issueOrganizationUuidParam = param
	} else {
	}
	result, err := c.service.LoanApplications(r.Context(), valueParam, incomingOrganizationUuidParam, issueOrganizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNewLoanApplication - Create new loan application
func (c *DefaultAPIController) CreateNewLoanApplication(w http.ResponseWriter, r *http.Request) {
	var createNewLoanApplicationRequestParam CreateNewLoanApplicationRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createNewLoanApplicationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateNewLoanApplicationRequestRequired(createNewLoanApplicationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateNewLoanApplicationRequestConstraints(createNewLoanApplicationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNewLoanApplication(r.Context(), createNewLoanApplicationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLoanApplicationsByIncomingOrganizationUUID - Find loan applications by incoming organization UUID
func (c *DefaultAPIController) GetLoanApplicationsByIncomingOrganizationUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	incomingOrganizationUuidParam := params["incoming_organization_uuid"]
	if incomingOrganizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"incoming_organization_uuid"}, nil)
		return
	}
	result, err := c.service.GetLoanApplicationsByIncomingOrganizationUUID(r.Context(), incomingOrganizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLoanApplicationsByIssueOrganizationUUID - Find loan applications by issue organization UUID
func (c *DefaultAPIController) GetLoanApplicationsByIssueOrganizationUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueOrganizationUuidParam := params["issue_organization_uuid"]
	if issueOrganizationUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"issue_organization_uuid"}, nil)
		return
	}
	result, err := c.service.GetLoanApplicationsByIssueOrganizationUUID(r.Context(), issueOrganizationUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLoanApplicationByUUID - Find loan application by UUID
func (c *DefaultAPIController) GetLoanApplicationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.GetLoanApplicationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteLoanApplicationByUUID - Delete loan application by UUID
func (c *DefaultAPIController) DeleteLoanApplicationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteLoanApplicationByUUID(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateLoanApplicationByUUID - Update loan application by UUID
func (c *DefaultAPIController) UpdateLoanApplicationByUUID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	var loanApplicationPatchParam LoanApplicationPatch
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loanApplicationPatchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoanApplicationPatchRequired(loanApplicationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoanApplicationPatchConstraints(loanApplicationPatchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateLoanApplicationByUUID(r.Context(), uuidParam, loanApplicationPatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
