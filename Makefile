# .PHONY ‚Äî —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏ (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è)
.PHONY: db-build db-up db-down goose
.PHONY: status up up-by-one up-to down down-to redo
.PHONY: migration-create-sql migration-create-go create-core debug-env
.PHONY: test-db-up test-db-down migrate-check
.PHONY: swagger-gen
.PHONY: build-app app-up app-down

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
MIGRATIONS_DIR := ./migrations
COMPOSE_ARGS := --env-file .env.local -f docker-compose.yml
COMPOSE := docker compose $(COMPOSE_ARGS)
GOOSE_SERVICE := goose

# ========== –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ==========

db-build:
	$(COMPOSE) build postgres goose

db-up: db-build
	$(COMPOSE) up -d postgres
	$(COMPOSE) up -d goose

db-down:
	$(COMPOSE) down

# ========== –ú–∏–≥—Ä–∞—Ü–∏–∏ ==========

status:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) status

up:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) up

up-by-one:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) up-by-one

up-to:
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ VERSION: make up-to VERSION=5"; \
		exit 1; \
	fi
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) up-to $(VERSION)

down:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) down

down-to:
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ VERSION: make down-to VERSION=3"; \
		exit 1; \
	fi
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) down-to $(VERSION)

redo:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) redo

# ========== –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π ==========

migration-create-sql:
	@if [ -z "$(NAME)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ NAME: make migration-create-sql NAME=add_users_table"; \
		exit 1; \
	fi
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) create $(NAME) sql

migration-create-go:
	@if [ -z "$(NAME)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ NAME: make migration-create-go NAME=add_users_table"; \
		exit 1; \
	fi
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) create $(NAME) go

create-core:
	@if [ -z "$(NAME)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ NAME: make create-core NAME=create_users"; \
		exit 1; \
	fi
	@if [ ! -f scripts/create-core-template.sql ]; then \
		echo "‚ùå –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: scripts/create-core-template.sql"; \
		exit 1; \
	fi
	@echo "üîí –°–æ–∑–¥–∞—ë–º core-–º–∏–≥—Ä–∞—Ü–∏—é: $(NAME)"
	$(COMPOSE) run --rm $(GOOSE_SERVICE) goose -dir $(MIGRATIONS_DIR) create $(NAME) sql
	@MIG_FILE=$$(ls -t $(MIGRATIONS_DIR)/[0-9]*_$(NAME).sql | head -n1); \
	if [ -n "$$MIG_FILE" ]; then \
		cat scripts/create-core-template.sql > "$$MIG_FILE"; \
		echo "‚úÖ Core-–º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $$MIG_FILE"; \
	else \
		echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è!"; \
		exit 1; \
	fi

debug-env:
	$(COMPOSE) run --rm $(GOOSE_SERVICE) env | grep -E "GOOSE|POSTGRES"

# ========== Swagger ==========

swagger-gen:
	swag init --generalInfo main.go --dir cmd/server,internal

# ========== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ==========

# –§–∞–π–ª-–º–∞—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
APP_BUILD_MARKER := .build/app.marker

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –≤—Å–µ .go —Ñ–∞–π–ª—ã –∏ go.mod/go.sum
GO_SOURCES := $(shell find . -name '*.go' -not -path './vendor/*')
GO_MOD_FILES := go.mod go.sum

# –¶–µ–ª—å: –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
$(APP_BUILD_MARKER): $(GO_SOURCES) $(GO_MOD_FILES) ../application_aggregator/Dockerfile
	@mkdir -p .build
	@echo "üì¶ –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–∏)..."
	$(COMPOSE) build app
	@touch $@

# –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
build-app: $(APP_BUILD_MARKER)

app-up: build-app
	$(COMPOSE) --profile app up -d

app-down:
	$(COMPOSE) --profile app stop
#	$(COMPOSE) --profile app rm -f

# ========== –¢–µ—Å—Ç–æ–≤–∞—è –ë–î ==========

test-db-up:
	@cp -n .env.test.example .env.test 2>/dev/null || true
	docker compose --env-file .env.test -f docker-compose.test.yml up -d postgres-test

test-db-down:
	docker compose --env-file .env.test -f docker-compose.test.yml down -v

migrate-check:
	@echo "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–∞–∫–∞—Ç ‚Üí –æ—Ç–∫–∞—Ç ‚Üí –Ω–∞–∫–∞—Ç)..."
	@cp -n .env.test.example .env.test 2>/dev/null || true
	docker compose --env-file .env.test -f docker-compose.test.yml up -d postgres-test
	@sleep 5
	@echo "‚Üí –ù–∞–∫–∞—Ç –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π..."
	docker compose --env-file .env.test -f docker-compose.test.yml run --rm goose-test goose -dir ./migrations up
	@echo "‚Üí –û—Ç–∫–∞—Ç –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π..."
	docker compose --env-file .env.test -f docker-compose.test.yml run --rm goose-test goose -dir ./migrations down-to 0
	@echo "‚Üí –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –Ω–∞–∫–∞—Ç..."
	docker compose --env-file .env.test -f docker-compose.test.yml run --rm goose-test goose -dir ./migrations up
	@echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã."
	docker compose --env-file .env.test -f docker-compose.test.yml down
